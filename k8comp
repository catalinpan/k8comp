#!/bin/bash

source /opt/k8comp/k8comp.conf
source /opt/k8comp/usage

programname=$0
red="$(tput setaf 1)"
green="$(tput setaf 2)"
yellow="$(tput setaf 3)"

MAIN() {
  check_vars
  set_file
  create_tmp
  replace_var
  replace_xvar
  replace_allvar
  print_file
  clean
}

error() {
    echo -e "${red}[ ERROR ] - $@ $(tput sgr0)"
}

message_green() {
    echo -e "${green} $@ $(tput sgr0)"
}

message_yellow() {
    echo -e "${yellow} $@ $(tput sgr0)"
}

read_x_args() {
  while (($#)) && [[ $1 != -* ]];
  do args+=("$1");
    shift;
  done
}

while [ $# -gt 0 ]; do
# set the variable from input for all the arguments
  input+=("$1")
# set variables from input
  case "$1" in
    -p|--project)
      if [ -n "$2" ]; then
        project=$2
        hrp="project=$2"
        hrall+="${hrp} "
        shift
      else
        usage
        exit 1
      fi
    ;;
    -a|--application)
      if [ -n "$2" ]; then
        application=$2
        hra="application=$2"
        hrall+="${hra} "
        shift
      else
        usage
        exit 1
      fi
    ;;
    -e|--environment)
      if [ -n "$2" ]; then
        environment=$2
        hre="environment=$2"
        hrall+="${hre} "
        shift
      fi
    ;;
    -l|--location)
      if [ -n "$2" ]; then
        location=$2
        hrl="location=$2"
        hrall+="${hrl} "
        shift
      fi
    ;;
    -x|--xtra)
      read_x_args "${@:2}"
    ;;
    -h|--help)
      usage
      exit 0
    ;;
  esac
  shift
done

# check if the required values are declared
check_vars() {
  if [ -z ${project} ]
  then
  	usage
  	exit 1
  fi
}

set_file() {
# if project, application and any other argument is declared
  if [[ "${input[@]}" =~ "p" && "${input[@]}" =~ "a" ]]
  then
# test if the application is a file or a folder
    if [ -f ${projects_path}/${project}/${application}.* ]
    then
      xfile=${projects_path}/${project}/${application}.*
    else
      xfolder=${projects_path}/${project}/${application}
      xfile=${xfolder}/*
    fi
# if project and any other argument is declared other thaj application
  elif [[ "${input[@]}" =~ "p" ]]
  then
    xfile=${projects_path}/${project}.*
  fi

# test if either the file or the folder of the application exists
  for file in ${xfile}
  do
    if [ ! -d ${xfolder} ] || [ ! -f ${file} ]
    then
      error "${project} ${application} not found in projects folder"
      exit 1
    fi
  done
}

create_tmp() {
  tmp_file=$(mktemp /tmp/k8comp.XXXXXX)
# set the start of the file
  for eachfile in ${xfile}
  do
    if [ "$(head -1 ${eachfile})" != "---" ]
    then
      echo -e "\n---" >> ${tmp_file}
      cat ${eachfile} >> ${tmp_file}
    else
      cat ${eachfile} >> ${tmp_file}
    fi
  done
}

replace_var() {
  sed -i "s|%{project}|${project}|g" ${tmp_file}
  sed -i "s|%{application}|${application}|g" ${tmp_file}
  sed -i "s|%{environment}|${environment}|g" ${tmp_file}
  sed -i "s|%{location}|${location}|g" ${tmp_file}
}

replace_xvar() {
  for xvar in ${args[@]}
  do
    sed -i "s|%{${xvar%%=*}}|${xvar##*=}|g" ${tmp_file}
  done
}

replace_allvar() {
  for variable in $(grep -o '\%{[a-z,A-Z,0-9,_,-]*\}' ${tmp_file} |sort |uniq |sed 's|[%{}]||g')
  do
    hr=$(hiera -c ${custom_hiera} ${variable} ${hrall[@]})

    if [ "${hr}" = "nil" ] || [ "${hr}" = "" ]
    then
     error "${variable} not found in hiera"
     clean
     exit 1
    else
     sed -i "s|%{${variable}}|${hr}|g" ${tmp_file}
    fi
  done
}


print_file() {
  # set notification variable
  notification="####### NOTICE ####### Deployment from ${xfile}"
  border="######################"
  # print file on stdout
  cat ${tmp_file}
  # echo notification
  echo ${border}
  echo ${notification}
}

clean() {
  if [ -f ${tmp_file} ]
  then
    rm -rf ${tmp_file}
  fi
}

MAIN
