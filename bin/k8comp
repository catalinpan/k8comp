#!/bin/bash
set +x
version=0.6.0
source /opt/k8comp/k8comp.conf

k8comp_home=$k8comp_dir/bin
mapping=$k8comp_dir/extras/mapping

programname=$0
red="$(tput setaf 1)"
green="$(tput setaf 2)"
yellow="$(tput setaf 3)"

MAIN() {
  if [ $pull ]
  then
    git_pull_only
  else
    set_environments
    kube_vars
    set_file
    create_tmp
# replace main variables on the main temporary file
    replace_var
    replace_xvar
    replace_allvar
# replace the main variables if any are passed back on the main temp file from hiera
    replace_var
    external_files
    print_file
    clean
  fi
}

usage() {
 message_green "
 Usage: $programname [-h | pull | -p <project_name> -a <application> -e <environment> -b <git_branch>]

 Supported formats: yaml, yml, json

 Mandatory variables -p <project_name>

 -h | --help :                           Display usage information.
 -p | --project <project_name> :         Project name as specified on the projects folder.
                                         Configuration specified in k8comp.conf.
                                         Current projects path ${projects_path}.
                                         If only <project> or <project> and <environment> are
                                         specified the deployment will be from
                                         ${projects_path}/<project>.* file

 -a | --application <application> :      The name of the application which need to be deployed.
                                         <application> file has priority over <application> folder.
                                         If ${projects_path}/<project>/<application>.* file is present
                                         the deployment will be from that file.
                                         If there is no file in the above mentioned location the
                                         deployment will be from
                                         ${projects_path}/<project>/<application>/ folder.
                                         There are no naming restrictions for the files from
                                         ${projects_path}/<project>/<application>/ folder.
                                         If no <application> is specified in the cmd the deployment
                                         will be from ${projects_path}/<project>.* file.
                                         An application folder or file can be located also
                                         at the projects folder root. The hiera config requires
                                         changes for this to work as expected.

 -e | --environment <environment> :      The environment will be checked from hiera. If no values are
                                         found in hiera the variables will not be replaced.
                                         NOT PART OF projects FILE STRUCTURE but can be added as
                                         variable in the yaml|yml|json template.
                                         Available only in hiera

 -t | --template <template> :            The templates folder can be configured on the k8comp.conf.
                                         The base location is on the projects folder.
                                         Can be used in conjunction with any of the main variables.
                                         Any other variables from the template will be retrieved
                                         from the hierarchy of the arguments (main variables).
                                         The template name will not be used to query hiera.

 -l | --location <location> :            The location will be checked from hiera. If no values are
                                         found in hiera the variables will not be replaced.
                                         NOT PART OF projects FILE STRUCTURE but can be added as
                                         variable in the yaml|yml|json template.
                                         Available only in hiera

 -x | --xtra <variable> :                The variable specified on the cmd run will be used to update
                                         a value on the final deployment file.
                                         This will have priority over hiera value. Is not mandatory
                                         to be specified.
                                         The format is variable=value.

 -b | --branch <variable> :              Specify a branch from where to do the deployment.
                                         It requires k8comp_environments to be

 pull | --pull :                         If k8comp_environments is enabled and auto_git_pull is false
                                         use >k8comp pull< without any arguments to pull
                                         main_deployment_branch or >k8comp pull -b your_branch< for
                                         a specific git branch.
                                         For pulling via ssh make sure the private key is available
                                         on the server/container.

 Examples:
  k8comp pull
  k8comp pull -b test_branch

  k8comp -p project -a application -e development -b test_branch | kubectl apply -f -
  k8comp -p project -a application/rc
  k8comp -p project -e development
  k8comp -p project

  k8comp -a application -e environment
  k8comp -a application

  k8comp -t ingress -a application -e environment
  k8comp -t redirects/ingress -a application -e environment

  k8comp -p project -a application -e development -x var1=value1 -x var2=value2 | kubectl create -f -
  k8comp -p project -a application -x var1=value1 -x var2=value2 | kubectl apply -f -

  Dry run:

  k8comp -p project -a application -e development
  k8comp -p project -a application -e development -x var1=value1
  "
}

error() {
    echo -e "${red}[ ERROR ] - $@ $(tput sgr0)"
}

message_green() {
    echo -e "${green}$@ $(tput sgr0)"
}

message_yellow() {
    echo -e "${yellow}$@ $(tput sgr0)"
}

read_x_args() {
  while (($#)) && [[ $1 != -* ]];
  do args+=("$1");
    shift;
  done
}

while [ $# -gt 0 ]; do
# set the variable from input for all the arguments
  input+=("$1")
# set variables from input
  case "$1" in
    -t|--template|template)
      if [ -n "$2" ]; then
        template=$2
        shift
      fi
    ;;
    -p|--project|project)
      if [ -n "$2" ]; then
        project=$2
        hrp="project=${2}"
        hrall+="${hrp} "
        shift
      fi
    ;;
    -a|--application|application)
      if [ -n "$2" ]; then
        application=${2}
        hra="application=${2%%/*}"
        hrall+="${hra} "
        shift
      fi
    ;;
    -e|--environment|environment)
      if [ -n "$2" ]; then
        environment=$2
        hre="environment=${2}"
        hrall+="${hre} "
        shift
      fi
    ;;
    -l|--location|location)
      if [ -n "$2" ]; then
        location=$2
        hrl="location=${2}"
        hrall+="${hrl} "
        shift
      fi
    ;;
    -b|--branch|branch)
      if [ -n "$2" ]; then
        branch=$2
        hrb="branch=${2}"
        hrall+="${hrb} "
        shift
      fi
    ;;
    -x|--xtra|xtra)
      read_x_args "${@:2}"
    ;;
    pull|--pull)
      pull=true
    ;;
    -h|--help)
      usage
      exit 0
    ;;
    -v|--version|version)
      echo "$version"
      exit 0
    ;;
  esac
  shift
done

# function used only to pull specific branches as environments
git_pull_only () {
  if [ $pull ] && [ ${projects_repo} ]
  then
    if set_environments
    then
      message_green "[ NOTICE ] - Successful pull ${branch:-${main_deployment_branch}} branch"
    fi
  else
    error "Projects repo not declared"
  fi
}

clone_git () {
  if ! grep -sq "$1" $projects_path/environments/${branch:-${main_deployment_branch}}/${2}/.git/config
  then
    rm -rf $projects_path/environments/${branch:-${main_deployment_branch}}/${2}
    if ! git clone --quiet $1 $projects_path/environments/${branch:-${main_deployment_branch}}/${2}
    then
      error "Error cloning $1"
      exit 1
    fi
  fi
  cd $projects_path/environments/${branch:-${main_deployment_branch}}/${2}
  git reset --hard HEAD --quiet
  git fetch --quiet --all
  git pull --quiet --all
  if ! git checkout ${branch:-${main_deployment_branch}} --quiet
  then
    error "Branch ${branch:-${main_deployment_branch}} not found"
    exit 1
  fi
}

# function used for environments based on branches
set_environments() {
  if [ "${k8comp_environments}" == "enabled" ] && [ "$auto_git_pull" == "true" ] || [ $pull ]
  then
    if [ -z $hieradata_repo ]
    then
      clone_git $projects_repo
    elif [ -n $hieradata_repo ]
    then
# get the project clone folder from the k8comp.conf. Take only the last folder name of the variable
      clone_git $projects_repo ${projects_path##*/}
      clone_git $hieradata_repo hieradata
    fi
  fi
  if [[ "${k8comp_environments}" == "enabled" && -z ${branch} ]]
  then
    hrb="branch=${branch:-${main_deployment_branch}}"
    hrall+="${hrb} "
  fi
}

# the function will check the variables mapping and replace them in the deployment
# if the variables cannot be found the cmd values will be used
kube_vars(){
  for i in ${hrall[@]}
  do
    find_var=$(grep -vs '^#' $mapping/* | grep -h "^${i##*=}=")
# all variables form extras/mapping will be passed to hiera via mappings variable
    mappings+=($find_var)
    if [[ "${i%%=*}" == "project" ]]
    then
      if [ -z $find_var ]
      then
        h_project=$project
      else
        pvar=$find_var
        h_project=${pvar##*=}
      fi
    elif [[ "${i%%=*}" == "application" ]]
    then
      if [ -z $find_var ]
      then
        h_application=${application%%/*}
      else
        avar=$find_var
        h_application=${avar##*=}
      fi
    elif [[ "${i%%=*}" == "environment" ]]
    then
      if [ -z $find_var ]
      then
        h_environment=$environment
      else
        evar=$find_var
        h_environment=${evar##*=}
      fi
    elif [[ "${i%%=*}" == "location" ]]
    then
      if [ -z $find_var ]
      then
        h_location=$location
      else
        lvar=$find_var
        h_location=${lvar##*=}
      fi
    fi
done
}

set_file() {
# if multiple environments are enabled set a variable with the new folder path
  if [ "${k8comp_environments}" == "enabled" ]
  then
    envs="environments/${branch:-${main_deployment_branch}}/${projects_path##*/}"
    err1="or ${projects_path##*/}/${envs}"
  fi

  if [ -z $environment ]
  then
    err2="and no environment specified"
  fi

  err0="No deployment files found on ${projects_path##*/}/$project ${err1} ${err2}"

# if project, application and any other argument is declared
  if [[ ! -z ${template} ]]
  then
      xfile=${projects_path}/${envs}/${templates_path}/${template}.*
  elif [[ ! -z "${project}" && ! -z "${application}" ]]
  then
# test if the application is a file or a folder

    if [ -f ${projects_path}/${envs}/${project}/${application}.* ]
    then
      xfile=${projects_path}/${envs}/${project}/${application}.*

    elif [ -d ${projects_path}/${envs}/${project}/${application} ]
    then
      xfolder=${projects_path}/${envs}/${project}/${application}
      xfile=${xfolder}/*.*
    else
      error $err0
      exit 1
    fi

# if project is not declared
elif [[ -z "${project}" && "${application}" ]]
 then
# test if the application is a file or a folder
  if [ -f ${projects_path}/${envs}/${application}.* ]
  then
    xfile=${projects_path}/${envs}/${application}.*
  elif [ -d ${projects_path}/${envs}/${application} ]
  then
    xfolder=${projects_path}/${envs}/${application}
    xfile=${xfolder}/*.*
  else
    error $err0
    exit 1
  fi
# if project and any other argument is declared other than application
  elif [[ "${project}" ]]
  then
    if [ -f ${projects_path}/${envs}/${project}.* ]
    then
      xfile=${projects_path}/${envs}/${project}.*
    else
      error $err0
      exit 1
    fi
  fi
}

create_tmp() {
  tmp_file=$(mktemp /tmp/k8comp.XXXXXX)
# set the start of the file
  for eachfile in ${xfile}
  do
    if [[ "$(head -1 ${eachfile})" =~ "---" ]]
    then
      grep -v '^#' ${eachfile} >> ${tmp_file}
    else
      echo -e "\n---" >> ${tmp_file}
      grep -v '^#' ${eachfile} >> ${tmp_file}
    fi
  done
  echo " " >> ${tmp_file}
}

replace_var() {
  sed -i "s|%{project}|${h_project}|g" ${tmp_file}
  sed -i "s|%{application}|${h_application}|g" ${tmp_file}
  sed -i "s|%{environment}|${h_environment}|g" ${tmp_file}
  sed -i "s|%{location}|${h_location}|g" ${tmp_file}
}

replace_xvar() {
  for xvar in ${args[@]}
  do
# avoind any conflicts when the variable include = character
    xvar2=$(echo ${xvar} | cut -c $(($(echo ${xvar%%=*} | awk '{ print length }')+2))-)
    sed -i "s|%{${xvar%%=*}}|${xvar2}|g" ${tmp_file}
  done
}

add_multiline_var () {
ed ${1}  > /dev/null 2>&1 << __EOF__
${2}i
$(cat ${3})
.
wq
__EOF__
}

replace_allvar() {
  for variable in $(grep -o '\%{[a-z,A-Z,0-9,_,-]*\}' ${tmp_file} |sort |uniq |sed 's|[%{}]||g')
  do
    hr="${hiera_path}/hiera -c ${custom_hiera} ${variable} ${hrall[@]} ${mappings[@]}"
# Check if should fail on variable not found
    if [ "$($hr)" = "nil" ] || [ -z "$($hr)" ]
    then
    nf_var+="$variable "
      if [ "$var_fail_safe" == "true" ]
      then
        error "${variable} not found in hiera"
        clean
        exit 1
      else
# avoid nil value being added on the deployment file
        sed -i "s|%{${variable}}||g" ${tmp_file}
      fi

# if variable has more lines
    elif [[ "$($hr)" =~ '=>' ]]
    then
# counting the number of the same variable
      for each in $(grep -wn "%{${variable}}" ${tmp_file} | awk -F ':' '{print $1}')
      do
       variable_line_nr+="${each} "
      done
# for each variable in the files run a loop and replace the value
      for i in ${variable_line_nr[@]}
      do
# getting the new line of the variable
        var_line=$(grep -wn "%{${variable}}" ${tmp_file} | awk -F ':' '{print $1}' | head -1)
        var_file=$(mktemp /tmp/k8comp.XXXXXX)
        if [ ! -z ${var_line} ]
        then
          leading_spaces=$(sed -n ${var_line}p ${tmp_file} | awk -F"[ ]" '{for(i=1;i<=NF && ($i=="");i++);print i}')
          add_leading_spaces=$(seq -s' ' ${leading_spaces}|tr -d '[:digit:]')
          $hr -f yaml | tail -n +2 | sed -e "s/^/${add_leading_spaces}/" > $var_file
# delete line
          sed -i "${var_line}d" ${tmp_file}

          add_multiline_var ${tmp_file} ${var_line} ${var_file}

        fi
        if [ -f $var_file ]
        then
          rm -f $var_file
        fi
      done
    else
      sed -i "s|%{${variable}}|$($hr)|g" ${tmp_file}
    fi
  done
}

external_files() {
  urls=$(grep '^http' ${tmp_file})

  for u in ${urls}
  do
    sed -i "s|${u}||g" ${tmp_file}
    ext=$(curl -qs ${u})
    if [[ "${ext} | head -1" =~ "---" ]]
    then
      echo "${ext}" >> ${tmp_file}
    else
      echo -e "\n---" >> ${tmp_file}
      echo "${ext}" >> ${tmp_file}
    fi
  done
}

print_file() {
  # set notification variable
  notification="# NOTICE - Deployment from ${xfile}"
  border="######################"
  # print file on stdout
  cat ${tmp_file} | sed '/^$/d'
  # echo notification
  echo ${border}
  echo ""
  echo ${notification}
  if [ ! -z "${nf_var[@]}" ]
  then
    echo ""
    echo "# The following variables couldn't be retrieved from hiera: ${nf_var[@]}"
    echo ""
  fi
}

clean() {
  if [ -f ${tmp_file} ]
  then
    rm -f ${tmp_file}
  fi
}

MAIN
