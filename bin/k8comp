#!/bin/bash
set +x
version=0.6.2-beta1

if [ -z ${k8comp_dir} ]
then
    k8comp_dir=`pwd` #Application main folder
fi
custom_hiera=${k8comp_dir}/hiera.yaml #Custom hiera config file
hiera_path=/usr/local/bin #hiera binary location
projects_path=${k8comp_dir}/projects #deployment files location
templates_path=_templates #templates folder name. The folder is in `projects_path`
var_fail_safe=false #set if the deployment should fail on variable not found
k8comp_environments=disabled #each git branch equals an environment
auto_git_pull=false #git pull before each deployment
main_deployment_branch=master #works in conjunction with `k8comp_environment`
projects_repo= #works in conjunction with `auto_git_pull`
hieradata_repo= #works in conjunction with `auto_git_pull`
aws_sm_prefix=AWSSM #the prefix for the AWS Secrets Manager variables

# Added option to load k8comp.conf dynamically
if [ -f ${k8comp_dir}/k8comp.conf ]
then
    source ${k8comp_dir}/k8comp.conf
elif [ -f /opt/k8comp/k8comp.conf ]
then
    source /opt/k8comp/k8comp.conf
else
    notification+="Cannot locate k8comp.conf, using default values. "
fi

k8comp_home=$k8comp_dir/bin
mapping=$k8comp_dir/extras/mapping
# added dynamic location for hiera.yaml
hrall+="k8comp_dir=${k8comp_dir} "


programname=$0
red="$(tput setaf 1)"
green="$(tput setaf 2)"
yellow="$(tput setaf 3)"

MAIN() {
    if [ $pull ]
    then
        git_pull_only
    else
        set_environments
        kube_vars
        set_file
        create_tmp
        external_files
        # replace main variables on the main temporary file
        replace_var
        replace_xvar
        replace_allvar
        # replace any xvars which are passed back from hiera
        replace_xvar
        # replace the main variables if any are passed back on the main temp file from hiera
        replace_var
        # replace any other variables if any are passed back from hiera
        replace_allvar
        print_file
        clean
    fi
}

usage() {
    message_green "
 Usage: $programname [-h | pull | -p <project_name> -a <application> -e <environment> -b <git_branch>]

 Supported formats: yaml, yml, json

 Mandatory variables -p <project_name>

 -h | --help :                           Display usage information.
 -p | --project <project_name> :         Project name as specified on the projects folder.
                                         Configuration specified in k8comp.conf.
                                         Current projects path ${projects_path}.
                                         If only <project> or <project> and <environment> are
                                         specified the deployment will be from
                                         ${projects_path}/<project>.* file

 -a | --application <application> :      The name of the application which need to be deployed.
                                         <application> file has priority over <application> folder.
                                         If ${projects_path}/<project>/<application>.* file is present
                                         the deployment will be from that file.
                                         If there is no file in the above mentioned location the
                                         deployment will be from
                                         ${projects_path}/<project>/<application>/ folder.
                                         There are no naming restrictions for the files from
                                         ${projects_path}/<project>/<application>/ folder.
                                         If no <application> is specified in the cmd the deployment
                                         will be from ${projects_path}/<project>.* file.
                                         An application folder or file can be located also
                                         at the projects folder root. The hiera config requires
                                         changes for this to work as expected.

 -e | --environment <environment> :      The environment will be checked from hiera. If no values are
                                         found in hiera the variables will not be replaced.
                                         NOT PART OF projects FILE STRUCTURE but can be added as
                                         variable in the yaml|yml|json template.
                                         Available only in hiera

 -d | --product <product> :              The product will be checked from hiera. If no values are
                                         found in hiera the variables will not be replaced.
                                         NOT PART OF projects FILE STRUCTURE but can be added as
                                         variable in the yaml|yml|json template.
                                         Available only in hiera

 -r | --role <role> :                    The role will be checked from hiera. If no values are
                                         found in hiera the variables will not be replaced.
                                         NOT PART OF projects FILE STRUCTURE but can be added as
                                         variable in the yaml|yml|json template.
                                         Available only in hiera

 -n | --namespace <namespace> :          The namespace will be checked from hiera. If no values are
                                         found in hiera the variables will not be replaced.
                                         NOT PART OF projects FILE STRUCTURE but can be added as
                                         variable in the yaml|yml|json template.
                                         Available only in hiera

 -t | --template <template> :            The templates folder can be configured on the k8comp.conf.
                                         The base location is on the projects folder.
                                         Can be used in conjunction with any of the main variables.
                                         Any other variables from the template will be retrieved
                                         from the hierarchy of the arguments (main variables).
                                         The template name will not be used to query hiera.

 -l | --location <location> :            The location will be checked from hiera. If no values are
                                         found in hiera the variables will not be replaced.
                                         NOT PART OF projects FILE STRUCTURE but can be added as
                                         variable in the yaml|yml|json template.
                                         Available only in hiera

 -x | --xtra <variable> :                The variable specified on the cmd run will be used to update
                                         a value on the final deployment file.
                                         This will have priority over hiera value. Is not mandatory
                                         to be specified.
                                         The format is variable=value.

 -b | --branch <variable> :              Specify a branch from where to do the deployment.
                                         It requires k8comp_environments to be

 pull | --pull :                         If k8comp_environments is enabled and auto_git_pull is false
                                         use >k8comp pull< without any arguments to pull
                                         main_deployment_branch or >k8comp pull -b your_branch< for
                                         a specific git branch.
                                         For pulling via ssh make sure the private key is available
                                         on the server/container.

 --profile | -arp | -aarp                Specify the AWS IAM profile to be used for AWS Secrets manager
                                         secrets retrieval

 Examples:
  k8comp pull
  k8comp pull -b test_branch

  k8comp -p project -a application -e development -b test_branch | kubectl apply -f -
  k8comp -p project -a application/rc
  k8comp -p project -e development
  k8comp -p project

  k8comp -a application -e environment
  k8comp -a application

  k8comp -t ingress -a application -e environment
  k8comp -t redirects/ingress -a application -e environment

  k8comp -p project -a application -e environment --profile development

  k8comp -p project -a application -e development -x var1=value1 -x var2=value2 | kubectl create -f -
  k8comp -p project -a application -x var1=value1 -x var2=value2 | kubectl apply -f -

  Dry run:

  k8comp -p project -a application -e development
  k8comp -p project -a application -e development -x var1=value1
    "
}

error() {
    echo -e "${red}[ERROR] $@ $(tput sgr0)"
}

message_green() {
    echo -e "${green}[INFO] $@ $(tput sgr0)"
}

message_yellow() {
    echo -e "${yellow}$@ $(tput sgr0)"
}

read_x_args() {
    while (($#)) && [[ $1 != -* ]];
    do args+=("$1");
        shift;
    done
}

while [ $# -gt 0 ]; do
    # set the variable from input for all the arguments
    input+=("$1")
    # set variables from input
    case "$1" in
        -t|--template|template)
            if [ -n "$2" ]; then
                template=$2
                shift
            fi
            ;;
        -p|--project|project)
            if [ -n "$2" ]; then
                project=$2
                hrp="project=${2}"
                hrall+="${hrp} "
                shift
            fi
            ;;
        -a|--application|application)
            if [ -n "$2" ]; then
                application=${2}
                hra="application=${2%%/*}"
                hrall+="${hra} "
                shift
            fi
            ;;
        -e|--environment|environment)
            if [ -n "$2" ]; then
                environment=$2
                hre="environment=${2}"
                hrall+="${hre} "
                shift
            fi
            ;;
        -d|--product|product)
            if [ -n "$2" ]; then
                product=$2
                hrd="product=${2}"
                hrall+="${hrd} "
                shift
            fi
            ;;
        -r|--role|role)
            if [ -n "$2" ]; then
                role=$2
                hrr="role=${2}"
                hrall+="${hrr} "
                shift
            fi
            ;;
        -n|--namespace|namespace)
            if [ -n "$2" ]; then
                namespace=$2
                hrm="namespace=${2}"
                hrall+="${hrm} "
                shift
            fi
            ;;
        -l|--location|location)
            if [ -n "$2" ]; then
                location=$2
                hrl="location=${2}"
                hrall+="${hrl} "
                shift
            fi
            ;;
        -b|--branch|branch)
            if [ -n "$2" ]; then
                branch=$2
                hrb="branch=${2}"
                hrall+="${hrb} "
                shift
            fi
            ;;
        -aarp|-arp|--aws-assume-role-profile|--profile|-profile)
            if [ -n "$2" ]; then
                aws_assume_role_profile="--profile ${2}"
                shift
            fi
            ;;
        -x|--xtra|xtra)
            read_x_args "${@:2}"
            ;;
        pull|--pull)
            pull=true
            ;;
        helm|--helm)
            helm_package=true
            ;;
        helm-package-version|--helm-package-version|hpv)
            if [ -n "$2" ]; then
                helm_package_version=$2
                shift
            fi
            ;;
        -v|--version|version)
            echo "$version"
            exit 0
            ;;
        -h|--help)
            usage
            exit 0
            ;;
    esac
    shift
done

unameOut="$(uname -s)"
case "${unameOut}" in
    Darwin*)
      base64=gbase64
      ed=ged
      sed=gsed
      grep=ggrep
      ;;
    *)
      base64=base64
      ed=ed
      sed=sed
      grep=grep
      ;;
esac

convert_to_base64 () {
  echo "$1" | ${base64} -w 0
}

aws_sm_function () {
    # get the first part of the variable after the aws_sm_prefix
    nv=${1##*(}
    # get the variable without ) end
    nv2=${nv%?}
    # get the variable without any prefixes like BASE64
    nv3=${nv2##*BASE64,}
    get_secret=$nv3

    # test if the regions can be extracted from the variable/if the variable is a full arn
    if echo $nv3 | awk -F: '{print $4}' | ${grep} -qE "[a-z]"
    then
      # set the region from the arn of the variable
      region="--region $(echo $nv3 | awk -F: '{print $4}')"
      # test if from the secret a single value should be extracted
      if echo $nv3 | awk -F: '{print $8}' | ${grep} -qE "[a-zA-Z]"
      then
        # a single value should be extracted from the secret
        extract_var="$(echo $nv3 | awk -F: '{print $8}')"
        # redefine the secret name which should be retrieved. Remove the value of the single variable which should be extracted and remove also the last : which sits in front of the single value
        get_secret=$(echo $nv3 | ${sed} "s|${extract_var}||g" | ${sed} "s|:$||" )
      fi
    # if the secret is not the full arn test if a single value of the secret should be extracted
    elif [[ "${nv3}" =~ ":" ]]
    then
      # get the value of the single string which needs to be extracted from the secret
      extract_var="$(echo $nv3 | awk -F: '{print $2}')"
      # remove from the secret name the single value which should be extracted
      get_secret=${nv3%%:*}
    fi

    aws_sm_secret=$(aws secretsmanager get-secret-value ${aws_assume_role_profile} ${region} --query SecretString --secret-id ${get_secret} --output text)

    # test if the single value from the secret exists
    if [ "${extract_var}" != "" ]
    then
      # get the single value from the secret
      aws_sm_secret=$(echo "${aws_sm_secret}" | ${grep} ${extract_var})
      # if the delimiter is a :, if the secret is a json file then extract the single value of the secret
      if [[ "$aws_sm_secret" =~ ":" ]]
      then
        aws_sm_secret=$(echo "${aws_sm_secret}" | awk -F: '{print $2}')
      # if the delimiter is a = then extract the single value of the secret format should be SECRET=NAME
      elif [[ "$aws_sm_secret" =~ "=" ]]
      then
        aws_sm_secret=$(echo "${aws_sm_secret}" | awk -F= '{print $2}')
      fi
    fi

    # test if the secret should be converted to base64
    if [[ "${nv2}" =~ "BASE64" ]]
    then
      convert_to_base64 "${aws_sm_secret}"
    else
      echo "${aws_sm_secret}"
    fi
}

# function used only to pull specific branches as environments
git_pull_only () {
    if [ $pull ] && [ ${projects_repo} ]
    then
        if set_environments
        then
            message_green "Successful pull ${branch:-${main_deployment_branch}} branch"
        fi
    else
        error "Projects repo not declared"
    fi
}

clone_git () {
    if ! ${grep} -sq "$1" $projects_path/environments/${branch:-${main_deployment_branch}}/${2}/.git/config
    then
        rm -rf $projects_path/environments/${branch:-${main_deployment_branch}}/${2}
        if ! git clone --quiet $1 $projects_path/environments/${branch:-${main_deployment_branch}}/${2}
        then
            error "Error cloning $1"
            exit 1
        fi
    fi
    cd $projects_path/environments/${branch:-${main_deployment_branch}}/${2}
    git reset --hard HEAD --quiet
    git fetch --quiet --all
    git pull --quiet --all
    if ! git checkout ${branch:-${main_deployment_branch}} --quiet
    then
        error "Branch ${branch:-${main_deployment_branch}} not found"
        exit 1
    fi
}

# function used for environments based on branches
set_environments() {
    if [ "${k8comp_environments}" == "enabled" ] && [ "$auto_git_pull" == "true" ] || [ $pull ]
    then
        if [ -z $hieradata_repo ]
        then
            clone_git $projects_repo
        elif [ -n $hieradata_repo ]
        then
            # get the project clone folder from the k8comp.conf. Take only the last folder name of the variable
            clone_git $projects_repo ${projects_path##*/}
            clone_git $hieradata_repo hieradata
        fi
    fi
    if [[ "${k8comp_environments}" == "enabled" && -z ${branch} ]]
    then
        hrb="branch=${branch:-${main_deployment_branch}}"
        hrall+="${hrb} "
    fi
}

# the function will check the variables mapping and replace them in the deployment
# if the variables cannot be found the cmd values will be used
kube_vars(){
    for i in ${hrall[@]}
    do
        find_var=$(${grep} -vs '^#' $mapping/* | ${grep} -h "^${i##*=}=")
        # all variables form extras/mapping will be passed to hiera via mappings variable
        mappings+=($find_var)
        if [[ "${i%%=*}" == "project" ]]
        then
            if [ -z $find_var ]
            then
                h_project=$project
            else
                pvar=$find_var
                h_project=${pvar##*=}
            fi
        elif [[ "${i%%=*}" == "application" ]]
        then
            if [ -z $find_var ]
            then
                h_application=${application%%/*}
            else
                avar=$find_var
                h_application=${avar##*=}
            fi
        elif [[ "${i%%=*}" == "environment" ]]
        then
            if [ -z $find_var ]
            then
                h_environment=$environment
            else
                evar=$find_var
                h_environment=${evar##*=}
            fi
        elif [[ "${i%%=*}" == "product" ]]
        then
            if [ -z $find_var ]
            then
                h_product=$product
            else
                evar=$find_var
                h_product=${evar##*=}
            fi
        elif [[ "${i%%=*}" == "role" ]]
        then
            if [ -z $find_var ]
            then
                h_role=$role
            else
                evar=$find_var
                h_role=${evar##*=}
            fi
        elif [[ "${i%%=*}" == "namespace" ]]
        then
            if [ -z $find_var ]
            then
                h_namespace=$namespace
            else
                evar=$find_var
                h_namespace=${evar##*=}
            fi
        elif [[ "${i%%=*}" == "location" ]]
        then
            if [ -z $find_var ]
            then
                h_location=$location
            else
                lvar=$find_var
                h_location=${lvar##*=}
            fi
        fi
    done
}

set_file() {
    # if multiple environments are enabled set a variable with the new folder path
    if [ "${k8comp_environments}" == "enabled" ]
    then
        envs="environments/${branch:-${main_deployment_branch}}/${projects_path##*/}"
        err1="or ${projects_path##*/}/${envs}"
    fi

    if [ -z $environment ]
    then
        err2="and no environment specified"
    fi

    err0="No deployment files found on ${projects_path##*/}/$project ${err1} ${err2}"

    # if project, application and any other argument is declared
    if [[ ! -z ${template} ]]
    then
        xfile=${projects_path}/${envs}/${templates_path}/${template}.*
    elif [[ ! -z "${project}" && ! -z "${application}" ]]
    then
        # test if the application is a file or a folder
        if [ -f ${projects_path}/${envs}/${project}/${application}.* ]
        then
            xfile=${projects_path}/${envs}/${project}/${application}.*

        elif [ -d ${projects_path}/${envs}/${project}/${application} ]
        then
            xfolder=${projects_path}/${envs}/${project}/${application}
            xfile=${xfolder}/*.*
        else
            error $err0
            exit 1
        fi
        # if project is not declared
    elif [[ -z "${project}" && "${application}" ]]
    then
        # test if the application is a file or a folder
        if [ -f ${projects_path}/${envs}/${application}.* ]
        then
            xfile=${projects_path}/${envs}/${application}.*
        elif [ -d ${projects_path}/${envs}/${application} ]
        then
            xfolder=${projects_path}/${envs}/${application}
            xfile=${xfolder}/*.*
        else
            error $err0
            exit 1
        fi
        # if project and any other argument is declared other than application
    elif [[ "${project}" ]]
    then
        if [ -f ${projects_path}/${envs}/${project}.* ]
        then
            xfile=${projects_path}/${envs}/${project}.*
        else
            error $err0
            exit 1
        fi
    else
        usage
        exit 0
    fi
}

create_tmp() {
    tmp_file=$(mktemp /tmp/k8comp.XXXXXX)
    # set the start of the file
    for eachfile in ${xfile}
    do
        if [[ "$(head -1 ${eachfile})" =~ "---" ]]
        then
            ${grep} -v '^#' ${eachfile} >> ${tmp_file}
        else
            echo -e "\n---" >> ${tmp_file}
            ${grep} -v '^#' ${eachfile} >> ${tmp_file}
        fi
    done
    echo " " >> ${tmp_file}
}

replace_var() {
    ${sed}  -i "s|%{project}|${h_project}|g" ${tmp_file}
    ${sed}  -i "s|%{application}|${h_application}|g" ${tmp_file}
    ${sed}  -i "s|%{environment}|${h_environment}|g" ${tmp_file}
    ${sed}  -i "s|%{product}|${h_product}|g" ${tmp_file}
    ${sed}  -i "s|%{role}|${h_role}|g" ${tmp_file}
    ${sed}  -i "s|%{namespace}|${h_namespace}|g" ${tmp_file}
    ${sed}  -i "s|%{location}|${h_location}|g" ${tmp_file}
}

replace_xvar() {
    for xvar in ${args[@]}
    do
        # avoind any conflicts when the variable include = character
        xvar2=$(echo ${xvar} | cut -c $(($(echo ${xvar%%=*} | awk '{ print length }')+2))-)
        # owerwrite variables with defaults with xtra variables declared on cmd
        xvar_new_value=$(${grep} -oP '\%{\K[^\}]+' ${tmp_file} | ${grep} -w ${xvar%%=*} |uniq)
        ${sed}  -i "s|%{${xvar_new_value}}|${xvar2}|g" ${tmp_file}
    done
}

add_multiline_var () {
${ed} ${1}  > /dev/null 2>&1 << __EOF__
${2}i
$(cat ${3})
.
wq
__EOF__
}

check_var_fail_safe () {
  nf_var+="$1 "
  if [ "$var_fail_safe" == "true" ]
  then
      error "${variable%% default *} not found in hiera"
      clean
      exit 1
  else
      # avoid nil value being added on the deployment file
      ${sed}  -i "s|%{${variable}}||g" ${tmp_file}
  fi
}

replace_allvar() {
    # set a different IFS in case the default variables have white spaces
    OLDIFS=$IFS
    IFS=$(echo -en "\n\b")
    # find all the variables in the format %{}
    for variable in $(${grep} -oP '\%{\K[^\}]+' ${tmp_file} |sort |uniq)
    do
        # restore the old IFS
        IFS=$OLDIFS
        # added hiera hash support
        query="${custom_hiera} ${variable%% default *} ${hrall[@]} ${mappings[@]}"
        hr="${hiera_path}/hiera -h -c ${query}"
        if ! ${hr} > /dev/null 2>&1;
        then
            hr="${hiera_path}/hiera -c ${query}"
        fi
        # check for aws sm variables from hieradata
        if [[ "$($hr)" =~ "${aws_sm_prefix}" ]]
        then
          aws_var=$(aws_sm_function "$($hr)")
          if [ "${aws_var}" = "" ] || [ "$aws_var" = "Cg==" ]
          then
            check_var_fail_safe "$($hr) "
          else
           ${sed}  -i "s|%{${variable}}|${aws_var}|g" ${tmp_file}
          fi
        # check for aws sm variables from the deployment files
        elif [[ "$variable" =~ "${aws_sm_prefix}" ]]
          then
            aws_var=$(aws_sm_function "$variable")
            if [ "${aws_var}" = "" ] || [ "$aws_var" = "Cg==" ]
            then
              check_var_fail_safe "${variable} "
            else
             ${sed}  -i -e "s|%{${variable}}|${aws_var}|g" ${tmp_file}
            fi
        # if hiera variable is not found and no default value is set in the template add the variable in the final message with variables not found
        elif [ "$($hr)" = "nil" ] || [ -z "$($hr)" ] && [[ "${variable%% default *}" == "${variable##* default }" ]] && [[ ! "$($hr)" =~ "${aws_sm_prefix}" ]]
        then
          check_var_fail_safe "${variable%% default *} "
            # if variable has more lines
        elif [[ "$($hr)" =~ '=>' ]]
        then
            # counting the number of the same variable
            for each in $(${grep} -wn "%{${variable}}" ${tmp_file} | awk -F ':' '{print $1}')
            do
                variable_line_nr+="${each} "
            done
            # for each variable in the files run a loop and replace the value
            for i in ${variable_line_nr[@]}
            do
                # getting the new line of the variable
                var_line=$(${grep} -wn "%{${variable}}" ${tmp_file} | awk -F ':' '{print $1}' | head -1)
                var_file=$(mktemp /tmp/k8comp.XXXXXX)
                if [ ! -z ${var_line} ]
                then
                    leading_spaces=$(($(${sed}  -n ${var_line}p ${tmp_file} | awk -F"[ ]" '{for(i=1;i<=NF && ($i=="");i++);print i}')-1))
                    add_leading_spaces=$(printf %${leading_spaces}s)
                    $hr -f yaml | tail -n +2 | ${sed}  -e "s/^/${add_leading_spaces}/" > $var_file
                    # delete line
                    ${sed}  -i "${var_line}d" ${tmp_file}
                    add_multiline_var ${tmp_file} ${var_line} ${var_file}
                fi
                if [ -f $var_file ]
                then
                    rm -f $var_file
                fi
            done
            # if there is no hiera value and default is available use the default value
        elif [ "$($hr)" = "nil" ] || [ -z "$($hr)" ] && [[ "${variable%% default *}" != "${variable##* default }" ]]
        then
            ${sed}  -i "s|%{${variable}}|${variable##* default }|g" ${tmp_file}
        else
            ${sed}  -i "s|%{${variable}}|$($hr)|g" ${tmp_file}
        fi
    done
}

external_files() {
    urls=$(${grep} '^http' ${tmp_file})

    for u in ${urls}
    do
        ${sed}  -i "s|${u}||g" ${tmp_file}
        ext=$(curl -qs ${u})
        if [[ "${ext} | head -1" =~ "---" ]]
        then
            echo "${ext}" >> ${tmp_file}
        else
            echo -e "\n---" >> ${tmp_file}
            echo "${ext}" >> ${tmp_file}
        fi
    done
}

clean_helm_package(){
  if [ -d ./${1} ]
  then
      rm -rf ./${1}
  fi
}

helm_output() {
    helm_package_name=$(echo ${template} ${project} ${application} ${location} ${environment} | tr " " "-")
    if [ -z ${helm_package_version} ]
    then
        helmpv=$(date +%Y.%m%d.%H%M%S)
    else
        helmpv=${helm_package_version}
    fi

    mkdir -p ./${helm_package_name}/templates
    cat $1 > ./$helm_package_name/templates/k8comp-output.yaml
    echo "apiVersion: v1
description: ${template} ${project} ${application} ${environment} ${location}
name: ${helm_package_name}
version: ${helmpv}" > ./${helm_package_name}/Chart.yaml
    if helm lint ${helm_package_name}
    then
        helm package ${helm_package_name}
        message_green "helm chart: ${helm_package_name}-${helmpv}"
    else
        error "there are some errors with your current deployment"
        clean_helm_package ${helm_package_name}
        exit 1
    fi
    clean_helm_package ${helm_package_name}
}

print_file() {
    # set notification variable
    notification+="Deployment from ${xfile}"
    border="######################"
    # print file on stdout
    cat ${tmp_file} | ${sed}  '/^$/d'
    # echo notification
    echo ${border}
    echo ""
    echo "# [INFO] ${notification}"
    if [ ! -z "${nf_var[@]}" ]
    then
        echo ""
        echo "# The following variables couldn't be retrieved from hiera: ${nf_var[@]}"
        echo ""
    fi
    if [[ "${helm_package}" == "true" ]]
    then
        helm_output "${tmp_file}"
    fi
}

clean() {
    if [ -f ${tmp_file} ]
    then
        rm -f ${tmp_file}
    fi
}

MAIN
